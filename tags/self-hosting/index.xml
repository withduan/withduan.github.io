<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Self-Hosting on JL DUAN‘s Blog</title>
    <link>https://iduan.me/tags/self-hosting/</link>
    <description>Recent content in Self-Hosting on JL DUAN‘s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 30 Jun 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://iduan.me/tags/self-hosting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>subconverter 部署记录</title>
      <link>https://iduan.me/posts/subconverter-self-hosting/</link>
      <pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://iduan.me/posts/subconverter-self-hosting/</guid>
      <description>&lt;p&gt;我在 Mac 上一直使用 &lt;a href=&#34;https://github.com/yichengchen/clashX&#34;&gt;Clash X Pro&lt;/a&gt; 作为主力工具。 其 UI 简洁明了，使用起来也比较方便。但是比起 Clash for Windows ，它不方便添加个人规则。如果你直接修改配置文件，在下次更新远程节点时也会失效。更何况 FQ 配置文件内容复杂、篇幅又长，修改其内容时，经常因为一个莫名其妙的空格、亦或是其他细节问题导致配置文件无法被 Clash 读取。&lt;/p&gt;&#xA;&lt;p&gt;长期以来，我都是在新老配置文件之间复制粘贴自己需要的片段，因此迫切希望实现服务商处导出的配置可以和私人配置自动合并，省去这些烦人操作。近期发现了 &lt;a href=&#34;https://github.com/tindy2013/subconverter&#34;&gt;subconverter&lt;/a&gt; 这个超级棒的工具，可以完美解决我的烦恼。&lt;/p&gt;&#xA;&lt;h4 id=&#34;1-部署-subconverter&#34;&gt;1. 部署 subconverter&lt;/h4&gt;&#xA;&lt;p&gt;subconverter 有好几种部署方式，除了服务器部署，还可以在计算机本地直接运行。可是我下载 macOS 版本运行始终会报错，我也无能为力。最终我选择利用 docker 部署在服务器上，操作也比较简单。&lt;/p&gt;&#xA;&lt;h5 id=&#34;11-为服务器添加-docker-运行环境&#34;&gt;1.1 为服务器添加 docker 运行环境&lt;/h5&gt;&#xA;&lt;p&gt;步骤略……&lt;/p&gt;&#xA;&lt;h5 id=&#34;12-拉取-subconverter-镜像&#34;&gt;1.2 拉取 subconverter 镜像&lt;/h5&gt;&#xA;&lt;p&gt;我在 &lt;a href=&#34;https://hub.docker.com/&#34;&gt;DockerHub&lt;/a&gt; 找到了这个镜像是可以正常使用的：DockerHub：&lt;a href=&#34;https://hub.docker.com/r/stilleshan/subconverter&#34;&gt;stilleshan/subconverter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker pull stilleshan/subconverter&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h5 id=&#34;13--部署-subconverter-服务&#34;&gt;1.3  部署 subconverter 服务&lt;/h5&gt;&#xA;&lt;pre&gt;&lt;code&gt;docker run  -d --name=subconverter --restart=always -p 25500:25500 stilleshan/subconverter&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;注意：命令中的片段&lt;code&gt;25500:25500&lt;/code&gt; 依次表示服务器端口：容器端口，你也可以改成其他端口。此处设置的服务器端口可能需要在云服务商处设置端口放行，容器端口无所谓，不要和已有容器端口冲突就行。&lt;/p&gt;&#xA;&lt;p&gt;如果不出意外的话，subconverter 服务已经开始运行。浏览器打开 &lt;code&gt;http://你的服务器IP:25500&lt;/code&gt;，如果看到提示「File not found.」说明部署成功了。&lt;/p&gt;&#xA;&lt;p&gt;我建议做反向代理、设置域名解析。这样后续就可以用域名访问，无需输入端口号，部署 https 时也比较方便。&lt;/p&gt;&#xA;&lt;h4 id=&#34;2--修改-subconverter-服务配置&#34;&gt;2.  修改 subconverter 服务配置&lt;/h4&gt;&#xA;&lt;p&gt;想要直接对 docker 容器中的文件进行修改，这一点实现起来有点麻烦，但是我的主机安装了宝塔面板，就方便很多了。以上添加反向代理、解析域名、启用 https 这些操作我都是利用宝塔面板完成的。虽然这个面板风评一般，但也确实方便了像我这样的小白用户。&lt;/p&gt;&#xA;&lt;p&gt;在宝塔 docker 管理页面 - 容器 中，找到刚刚添加的 subconverter，点击该容器右侧的「目录」，就可以进入容器内查看文件。先打开「base」文件夹，你可以看到其中包含有四个文件，分别是「pref.example.yml」、「pref.example.toml」、「pref.example.ini」、「pref.toml」。&lt;/p&gt;&#xA;&lt;p&gt;toml、ini、yml 分别是三种不同的语法，我更习惯使用 yml 格式。&lt;/p&gt;&#xA;&lt;p&gt;删除「pref.example.toml」、「pref.example.ini」、「pref.toml」，将「pref.example.yml」文件名修改成「pref.yml」，打开该文件进行编辑。&lt;/p&gt;&#xA;&lt;p&gt;查看 subconverter &lt;a href=&#34;https://github.com/tindy2013/subconverter/blob/master/README-cn.md#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6&#34;&gt;官方文档&lt;/a&gt;，修改此配置文件中的内容。一定要仔细对比官方文档，几乎每一个参数都有详细说明，根据需要修改，或者保持默认。&lt;/p&gt;&#xA;&lt;h4 id=&#34;3--添加个性化配置&#34;&gt;3.  添加个性化配置&lt;/h4&gt;&#xA;&lt;p&gt;从网上下载的各种「懒人配置」中，用久了发现不太满足个人需求。比如常见的「懒人配置」中，这些内容我就不太需要：&#xA;1.去广告规则（个人不需要，电脑已经装了 AdGuard，结合浏览器去广告插件，效果已经非常好了，FQ 软件无需再添加去广告规则）；&#xA;2.流媒体分流规则（个人不需要，我只是偶尔看一下 YouTube，不用国外其他流媒体服务）&lt;/p&gt;&#xA;&lt;p&gt;有些网站则是需要走 proxy ，但是懒人配置里却没有相应规则，需要手动添加。通过修改 subconverter 配置文件，也可以实现个性化定制 FQ 软件配置。&lt;/p&gt;&#xA;&lt;h6 id=&#34;31-修改-groupstxt-文件&#34;&gt;3.1 修改 &lt;code&gt;groups.txt&lt;/code&gt; 文件&lt;/h6&gt;&#xA;&lt;p&gt;打开 &lt;code&gt;/snippets/groups.txt&lt;/code&gt;,你可以看到以下内容：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;🔰 节点选择`select`[]♻️ 自动选择`[]🎯 全球直连`.*&#xA;♻️ 自动选择`url-test`.*`http://www.gstatic.com/generate_204`300&#xA;🎥 NETFLIX`select`[]🔰 节点选择`[]♻️ 自动选择`[]🎯 全球直连`.*&#xA;⛔️ 广告拦截`select`[]🛑 全球拦截`[]🎯 全球直连`[]🔰 节点选择&#xA;🚫 运营劫持`select`[]🛑 全球拦截`[]🎯 全球直连`[]🔰 节点选择&#xA;🌍 国外媒体`select`[]🔰 节点选择`[]♻️ 自动选择`[]🎯 全球直连`.*&#xA;🌏 国内媒体`select`[]🎯 全球直连`(HGC|HKBN|PCCW|HKT|深台|彰化|新北|台|hk|港|tw)`[]🔰 节点选择&#xA;Ⓜ️ 微软服务`select`[]🎯 全球直连`[]🔰 节点选择`.*&#xA;📲 电报信息`select`[]🔰 节点选择`[]🎯 全球直连`.*&#xA;🍎 苹果服务`select`[]🔰 节点选择`[]🎯 全球直连`[]♻️ 自动选择`.*&#xA;🎯 全球直连`select`[]DIRECT&#xA;🛑 全球拦截`select`[]REJECT`[]DIRECT&#xA;🐟 漏网之鱼`select`[]🔰 节点选择`[]🎯 全球直连`[]♻️ 自动选择`.*&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;以上这些便是我们在 FQ 软件中看到的分组，可以根据需要添加私人分组，删除不需要的分组。&#xA;我的 &lt;code&gt;groups.txt&lt;/code&gt; 分组配置如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;♻️ 自动选择`url-test`.*`http://www.gstatic.com/generate_204`300&#xA;🚀 直接直连`select`[]DIRECT&#xA;🔰 节点选择`select`[]♻️ 自动选择`[]🚀 直接直连`.*&#xA;Ⓜ️ Microsoft`select`[]🚀 直接直连`[]🔰 节点选择`.*&#xA;✈️ Telegram`select`[]🔰 节点选择`[]🚀 直接直连`.*&#xA;🍎 Apple`select`[]🚀 直接直连`[]🔰 节点选择`.*&#xA;🐟 漏网之鱼`select`[]🔰 节点选择`[]🚀 直接直连`.*&#xA;👤 用户自定义`select`[]🔰 节点选择`[]🚀 直接直连`.*&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;只保留了需要的几个分组，还添加了自定义分组，用于保存自己遇到需要走 proxy 的网站。&lt;/p&gt;&#xA;&lt;h5 id=&#34;32-修改-rulesetstxt-文件&#34;&gt;3.2 修改 &lt;code&gt;rulesets.txt&lt;/code&gt; 文件&lt;/h5&gt;&#xA;&lt;p&gt;打开 &lt;code&gt;/snippets/rulesets.txt&lt;/code&gt;,你可以看到以下内容：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;🎯 全球直连,rules/LocalAreaNetwork.list&#xA;Ⓜ️ 微软服务,rules/MSServices.list&#xA;🎯 全球直连,rules/DivineEngine/Surge/Ruleset/Unbreak.list&#xA;🛑 全球拦截,rules/NobyDa/Surge/AdRule.list&#xA;🛑 全球拦截,rules/DivineEngine/Surge/Ruleset/Guard/Hijacking.list&#xA;🎥 NETFLIX,rules/DivineEngine/Surge/Ruleset/StreamingMedia/Video/Netflix.list&#xA;🌍 国外媒体,rules/DivineEngine/Surge/Ruleset/StreamingMedia/Streaming.list&#xA;🌏 国内媒体,rules/lhie1/Surge/Surge 3/Provider/Media/Bilibili.list&#xA;🌏 国内媒体,rules/lhie1/Surge/Surge 3/Provider/Media/iQiyi.list&#xA;🌏 国内媒体,rules/lhie1/Surge/Surge 3/Provider/Media/Letv.list&#xA;🌏 国内媒体,rules/lhie1/Surge/Surge 3/Provider/Media/MOO.list&#xA;🌏 国内媒体,rules/lhie1/Surge/Surge 3/Provider/Media/Tencent Video.list&#xA;🌏 国内媒体,rules/lhie1/Surge/Surge 3/Provider/Media/Youku.list&#xA;📲 电报信息,rules/DivineEngine/Surge/Ruleset/Extra/Telegram/Telegram.list&#xA;🔰 节点选择,rules/DivineEngine/Surge/Ruleset/Global.list&#xA;🍎 苹果服务,rules/DivineEngine/Surge/Ruleset/Extra/Apple/Apple.list&#xA;🎯 全球直连,rules/DivineEngine/Surge/Ruleset/China.list&#xA;🎯 全球直连,rules/NobyDa/Surge/Download.list&#xA;🎯 全球直连,[]GEOIP,CN&#xA;🐟 漏网之鱼,[]FINAL&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;可以看出默认规则组里，左边是分组名称，右边是引用的 list 规则文件，&lt;code&gt;rulesets.txt&lt;/code&gt;内包含的分组名称必须要和上一步&lt;code&gt;groups.txt&lt;/code&gt;中的分组一模一样，否则会报错。&#xA;根据分组名称后的文件路径，随便打开一个 list 文件，list 文件内就是熟悉的域名、IP 匹配语法。可以在适当位置新建一个 list 文件，用来编辑保存自己需要的规则。&lt;/p&gt;&#xA;&lt;p&gt;注：&lt;code&gt;rulesets.txt&lt;/code&gt;除了可以引用本地路径下的 list 文件，也可以引用网络中的 list 文件。&#xA;比如&lt;code&gt;🍎 苹果服务,rules/DivineEngine/Surge/Ruleset/Extra/Apple/Apple.list&lt;/code&gt;&#xA;表示引用&lt;code&gt;/rules/DivineEngine/Surge/Ruleset/Extra/Apple/&lt;/code&gt;文件路径中的&lt;code&gt;Apple.list&lt;/code&gt;文件；&lt;/p&gt;&#xA;&lt;p&gt;比如&lt;code&gt;🍎 苹果服务,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Apple.list&lt;/code&gt;&#xA;表示引用&lt;code&gt;raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Apple.list&lt;/code&gt;网址中的&lt;code&gt;Apple.list&lt;/code&gt;文件。&lt;/p&gt;&#xA;&lt;p&gt;我的&lt;code&gt;rulesets.txt&lt;/code&gt;规则组配置如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;🚀 直接直连,rules/LocalAreaNetwork.list&#xA;🚀 直接直连,rules/DivineEngine/Surge/Ruleset/China.list&#xA;🚀 直接直连,rules/NobyDa/Surge/Download.list&#xA;🚀 直接直连,[]GEOIP,CN&#xA;🚀 直接直连,rules/DivineEngine/Surge/Ruleset/Unbreak.list&#xA;🔰 节点选择,rules/DivineEngine/Surge/Ruleset/Global.list&#xA;🔰 节点选择,rules/ACL4SSR/Clash/ProxyGFWlist.list&#xA;Ⓜ️ Microsoft,rules/MSServices.list&#xA;✈️ Telegram,rules/DivineEngine/Surge/Ruleset/Extra/Telegram/Telegram.list&#xA;🍎 Apple,rules/DivineEngine/Surge/Ruleset/Extra/Apple/Apple.list&#xA;🐟 漏网之鱼,[]FINAL&#xA;👤 用户自定义,rules/myrules.list&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;注：&#xA;1.一个分组可以同时引用几个 list；&#xA;2.最后一个&lt;code&gt;myrules.list&lt;/code&gt;就是我用来保存个人规则的地方，参考一下其他 list 文件，写起来也很简单。&#xA;比如：在文件内添加一条&lt;code&gt;DOMAIN-SUFFIX,example.com&lt;/code&gt;，即表示「访问网站 example.com 时走 proxy」&lt;/p&gt;&#xA;&lt;h4 id=&#34;4-生成-fq-软件个性化配置&#34;&gt;4. 生成 FQ 软件个性化配置&lt;/h4&gt;&#xA;&lt;h5 id=&#34;41-前往你所使用的-fq-服务提供方获取节点订阅链接&#34;&gt;4.1 前往你所使用的 FQ 服务提供方，获取节点订阅链接&lt;/h5&gt;&#xA;&lt;p&gt;步骤略……&#xA;假设我获取到的订阅链接是：&lt;code&gt;example.com/subscribe/z1x2c3v4b5n6m&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h5 id=&#34;42--生成专属-fq-配置&#34;&gt;4.2  生成专属 FQ 配置&lt;/h5&gt;&#xA;&lt;p&gt;浏览器访问：&lt;code&gt;http://127.0.0.1:25500/sub?target=%TARGET%&amp;amp;url=%URL%&lt;/code&gt;，即可得到专属于自己的 FQ 配置文件。&lt;/p&gt;&#xA;&lt;p&gt;注：&lt;code&gt;http://127.0.0.1:25500&lt;/code&gt;是示例地址，需要填写你在步骤 1.3 中生成的 subconverter 后端地址。&#xA;比如：&lt;code&gt;http://你的服务器IP:25500/sub?target=%TARGET%&amp;amp;url=%URL%&lt;/code&gt;；&#xA;或者是已经设置反向代理的地址（无需填写端口号）：&lt;code&gt;http://xxx.com/sub?target=%TARGET%&amp;amp;url=%URL%&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;%TARGET%&lt;/code&gt;是你使用的 FQ 软件类型，具体支持软件请查看&lt;a href=&#34;https://github.com/tindy2013/subconverter/blob/master/README-cn.md#%E6%94%AF%E6%8C%81%E7%B1%BB%E5%9E%8B&#34;&gt;官方文档说明-支持类型&lt;/a&gt;；&#xA;&lt;code&gt;%URL%&lt;/code&gt; 是你的 FQ 服务订阅链接。&lt;/p&gt;&#xA;&lt;p&gt;假设我们要获取一个用于 clash 的配置，打开浏览器访问：&lt;code&gt;http://127.0.0.1:25500/sub?target= clash&amp;amp;url=example.com/subscribe/z1x2c3v4b5n6m&lt;/code&gt;，即可得到专属于自己的 FQ 配置文件。&lt;/p&gt;&#xA;&lt;p&gt;target 支持的软件类型请查看&lt;a href=&#34;https://github.com/tindy2013/subconverter/blob/master/README-cn.md#%E8%B0%83%E7%94%A8%E8%AF%B4%E6%98%8E&#34;&gt;官方文档说明&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;5-写在最后&#34;&gt;5. 写在最后&lt;/h4&gt;&#xA;&lt;p&gt;此次我利用 subconverter 搭建的后端服务，成功获取了包含「 FQ 服务节点 + 个性化分组 + 个人自定义规则」的 clash 配置文件。未来再次更新节点信息时，所有的个性化配置都可以得到保留，再也无需我手动修改 FQ 软件配置文件。&lt;/p&gt;&#xA;&lt;p&gt;此次也仅仅探索了 subconverter 其中一小部分功能，对 FQ 配置文件有更多个性化需求的朋友，建议仔细阅读&lt;a href=&#34;https://github.com/tindy2013/subconverter/blob/master/README-cn.md&#34;&gt;官方文档&lt;/a&gt;，实现更加丰富的定制功能。&lt;/p&gt;&#xA;&lt;h4 id=&#34;参考资料&#34;&gt;参考资料：&lt;/h4&gt;&#xA;&lt;p&gt;subconverter 中文文档&#xA;&lt;a href=&#34;https://github.com/tindy2013/subconverter/blob/master/README-cn.md&#34;&gt;https://github.com/tindy2013/subconverter/blob/master/README-cn.md&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>自建 Bark 后端服务</title>
      <link>https://iduan.me/posts/bark-server-self-hosting/</link>
      <pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://iduan.me/posts/bark-server-self-hosting/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.v2ex.com/t/467407&#34;&gt;Bark&lt;/a&gt; 是一款可以给 iPhone 发送自定义推送的服务，你可以利用 Bark 做一些有趣的事情，比如我之前分享的：&lt;a href=&#34;https://sspai.com/post/71054&#34;&gt;配合 SmsForward 转发 Android 设备的短信至 iPhone&lt;/a&gt;。Bark 本身提供后端服务，同时也开源了服务端代码，你可以利用 docker 轻松在服务器端部署私有化 Bark 后端服务。&lt;/p&gt;&#xA;&lt;p&gt;之前在博客有&lt;a href=&#34;https://iduan.me/archives/4/&#34;&gt;提到过&lt;/a&gt;我闲置了一个腾讯云虚拟主机，由于域名备案的关系，现在无法正常使用。我想与其闲置在那里，不如拿来做点有趣的事情。&lt;/p&gt;&#xA;&lt;p&gt;我本身对服务器这方面不是特别了解，看到 Bark 后端只提供了 docker 这一种部署方式。本来可以在腾讯云服务器的管理面板中直接重置系统镜像为 docker，这时忽然想起来，之前建站经常要用到的宝塔面板就可以安装 docker 管理器，宝塔面板里编辑服务器里的文件也比较方便，所以就先安装了宝塔面板，方便我后续进行操作。&lt;/p&gt;&#xA;&lt;p&gt;按照官方的&lt;a href=&#34;https://day.app/2018/06/bark-server-document/&#34;&gt;教程&lt;/a&gt;，我成功地在服务器中部署好了 Bark 后端服务。本来想解析一个二级域名&lt;code&gt;push.iduan.me&lt;/code&gt;在这台服务器上，方便配置。谁知解析生效还没过 10 分钟，就被腾讯云拦截了，由于这个域名还没有备案，按照相关法律法规的要求，解析是无法生效的，因此在配置后端服务时，只能填写 IP 地址，不过影响也不大～&lt;/p&gt;&#xA;&lt;p&gt;最麻烦的是给这个自建的后端服务添加 SSL 支持，官方教程只是阐述了怎么部署支持 http 访问的后端，根本没提 SSL 的事情。以前在宝塔面板里为网站开启 https 访问的方法在这里完全行不通，为此又耗费大量时间去网络中搜索，等这套后端服务彻底搞好的时候已经是半夜两点了……&lt;/p&gt;&#xA;&lt;p&gt;以下是服务搭建过程中开启 SSL 的一点点笔记：&lt;/p&gt;&#xA;&lt;h4 id=&#34;为-ip-地址申请-ssl-证书&#34;&gt;✍🏻为 IP 地址申请 SSL 证书&lt;/h4&gt;&#xA;&lt;p&gt;大部分云服务商不支持为 IP 地址申请 SSL 证书，可以访问 &lt;a href=&#34;https://zerossl.com/&#34;&gt;ZeroSSL&lt;/a&gt; 申请 IP 地址的SSL证书，免费账户申请的证书有效期只有三个月，而且不支持自动续签。&lt;/p&gt;&#xA;&lt;p&gt;将签发的证书（两个&lt;code&gt;.crt&lt;/code&gt;文件，一个&lt;code&gt;.key&lt;/code&gt;文件）上传至&lt;code&gt;/www/server/nginx/conf/cert&lt;/code&gt;目录下（没有 cert 文件夹就新建一个）&lt;/p&gt;&#xA;&lt;h4 id=&#34;为服务器启用-ssl&#34;&gt;✍🏻为服务器启用 SSL&lt;/h4&gt;&#xA;&lt;p&gt;修改 &lt;code&gt;/www/server/nginx/conf&lt;/code&gt; 路径下 &lt;code&gt;nginx.conf&lt;/code&gt; 配置文件，添加以下内容：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;server {&#xA;    listen 443 ssl http2;&#xA;    listen [::]:443 ssl http2;&#xA;    server_name 1.2.3.4;&#xA;    add_header Strict-Transport-Security &amp;#34;max-age=31536000; includeSubdomains; preload&amp;#34;;&#xA;    ssl_certificate cert/certificate.crt;&#xA;    ssl_certificate_key cert/private.key;&#xA;    ssl_session_timeout 1d;&#xA;    ssl_session_cache shared:SSL:50m;&#xA;    ssl_session_tickets off;&#xA;    ssl_protocols TLSv1.2;&#xA;    ssl_ciphers &amp;#39;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256&amp;#39;;&#xA;    ssl_prefer_server_ciphers on;&#xA;    ssl_stapling on;&#xA;    ssl_stapling_verify on;&#xA;    ssl_trusted_certificate cert/ca_bundle.crt;&#xA;    location / {&#xA;       proxy_pass http://127.0.0.1:8080;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;请将第4行中的&lt;code&gt;1.2.3.4&lt;/code&gt;修改为服务器 IP 地址；&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;cert/certificate.crt&lt;/code&gt;、&lt;code&gt;cert/private.key&lt;/code&gt;和&lt;code&gt;cert/ca_bundle.crt&lt;/code&gt;均为相对路径下存放的证书文件，绝对路径为：&lt;code&gt;/www/server/nginx/conf/cert&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;解决部分-android-app-连接-bark-后端服务时报错的问题&#34;&gt;✍🏻解决部分 Android App 连接 Bark 后端服务时报错的问题&lt;/h4&gt;&#xA;&lt;p&gt;开启 SSL 之后，在部分 Android 应用内访问服务器后端地址时可能会报错“java security cert.CertPathValidatorException: Trust anchor for certification path not found”，原因是后端服务在部署 SSL 时缺少了中间证书。&lt;/p&gt;&#xA;&lt;p&gt;你可以利用 &lt;a href=&#34;https://www.myssl.cn/tools/downloadchain.html&#34;&gt;https://www.myssl.cn/tools/downloadchain.html&lt;/a&gt; 这个工具，使用已有的&lt;code&gt;cert/certificate.crt&lt;/code&gt;文件快速生成中间证书，最后会得到&lt;code&gt;chain.crt&lt;/code&gt;这个文件。&lt;/p&gt;&#xA;&lt;p&gt;用文本编辑器打开&lt;code&gt;certificate.crt&lt;/code&gt;，在所有代码后面依次添加&lt;code&gt;ca_bundle.crt&lt;/code&gt;、&lt;code&gt;chain.crt&lt;/code&gt;这两个文件里的内容，最后的效果应该是这样的：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-----BEGIN CERTIFICATE-----&#xA;这里是 certificate.crt 原本的所有内容&#xA;-----END CERTIFICATE-----&#xA;-----BEGIN CERTIFICATE-----&#xA;这里是 ca_bundle.crt 文件中的所有内容&#xA;-----END CERTIFICATE-----&#xA;-----BEGIN CERTIFICATE-----&#xA;这里是 chain.crt 文件中的所有内容&#xA;-----END CERTIFICATE-----&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;保存文件，用这个编辑之后的&lt;code&gt;certificate.crt&lt;/code&gt;文件替换服务器中之前上传的的&lt;code&gt;certificate.crt&lt;/code&gt;，个别应用中报错的问题即可解决。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
