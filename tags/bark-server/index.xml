<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bark-Server on JL DUAN‘s Blog</title>
    <link>https://iduan.me/tags/bark-server/</link>
    <description>Recent content in Bark-Server on JL DUAN‘s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 08 Apr 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://iduan.me/tags/bark-server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>自建 Bark 后端服务</title>
      <link>https://iduan.me/posts/bark-server-self-hosting/</link>
      <pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://iduan.me/posts/bark-server-self-hosting/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.v2ex.com/t/467407&#34;&gt;Bark&lt;/a&gt; 是一款可以给 iPhone 发送自定义推送的服务，你可以利用 Bark 做一些有趣的事情，比如我之前分享的：&lt;a href=&#34;https://sspai.com/post/71054&#34;&gt;配合 SmsForward 转发 Android 设备的短信至 iPhone&lt;/a&gt;。Bark 本身提供后端服务，同时也开源了服务端代码，你可以利用 docker 轻松在服务器端部署私有化 Bark 后端服务。&lt;/p&gt;&#xA;&lt;p&gt;之前在博客有&lt;a href=&#34;https://iduan.me/archives/4/&#34;&gt;提到过&lt;/a&gt;我闲置了一个腾讯云虚拟主机，由于域名备案的关系，现在无法正常使用。我想与其闲置在那里，不如拿来做点有趣的事情。&lt;/p&gt;&#xA;&lt;p&gt;我本身对服务器这方面不是特别了解，看到 Bark 后端只提供了 docker 这一种部署方式。本来可以在腾讯云服务器的管理面板中直接重置系统镜像为 docker，这时忽然想起来，之前建站经常要用到的宝塔面板就可以安装 docker 管理器，宝塔面板里编辑服务器里的文件也比较方便，所以就先安装了宝塔面板，方便我后续进行操作。&lt;/p&gt;&#xA;&lt;p&gt;按照官方的&lt;a href=&#34;https://day.app/2018/06/bark-server-document/&#34;&gt;教程&lt;/a&gt;，我成功地在服务器中部署好了 Bark 后端服务。本来想解析一个二级域名&lt;code&gt;push.iduan.me&lt;/code&gt;在这台服务器上，方便配置。谁知解析生效还没过 10 分钟，就被腾讯云拦截了，由于这个域名还没有备案，按照相关法律法规的要求，解析是无法生效的，因此在配置后端服务时，只能填写 IP 地址，不过影响也不大～&lt;/p&gt;&#xA;&lt;p&gt;最麻烦的是给这个自建的后端服务添加 SSL 支持，官方教程只是阐述了怎么部署支持 http 访问的后端，根本没提 SSL 的事情。以前在宝塔面板里为网站开启 https 访问的方法在这里完全行不通，为此又耗费大量时间去网络中搜索，等这套后端服务彻底搞好的时候已经是半夜两点了……&lt;/p&gt;&#xA;&lt;p&gt;以下是服务搭建过程中开启 SSL 的一点点笔记：&lt;/p&gt;&#xA;&lt;h4 id=&#34;为-ip-地址申请-ssl-证书&#34;&gt;✍🏻为 IP 地址申请 SSL 证书&lt;/h4&gt;&#xA;&lt;p&gt;大部分云服务商不支持为 IP 地址申请 SSL 证书，可以访问 &lt;a href=&#34;https://zerossl.com/&#34;&gt;ZeroSSL&lt;/a&gt; 申请 IP 地址的SSL证书，免费账户申请的证书有效期只有三个月，而且不支持自动续签。&lt;/p&gt;&#xA;&lt;p&gt;将签发的证书（两个&lt;code&gt;.crt&lt;/code&gt;文件，一个&lt;code&gt;.key&lt;/code&gt;文件）上传至&lt;code&gt;/www/server/nginx/conf/cert&lt;/code&gt;目录下（没有 cert 文件夹就新建一个）&lt;/p&gt;&#xA;&lt;h4 id=&#34;为服务器启用-ssl&#34;&gt;✍🏻为服务器启用 SSL&lt;/h4&gt;&#xA;&lt;p&gt;修改 &lt;code&gt;/www/server/nginx/conf&lt;/code&gt; 路径下 &lt;code&gt;nginx.conf&lt;/code&gt; 配置文件，添加以下内容：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;server {&#xA;    listen 443 ssl http2;&#xA;    listen [::]:443 ssl http2;&#xA;    server_name 1.2.3.4;&#xA;    add_header Strict-Transport-Security &amp;#34;max-age=31536000; includeSubdomains; preload&amp;#34;;&#xA;    ssl_certificate cert/certificate.crt;&#xA;    ssl_certificate_key cert/private.key;&#xA;    ssl_session_timeout 1d;&#xA;    ssl_session_cache shared:SSL:50m;&#xA;    ssl_session_tickets off;&#xA;    ssl_protocols TLSv1.2;&#xA;    ssl_ciphers &amp;#39;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256&amp;#39;;&#xA;    ssl_prefer_server_ciphers on;&#xA;    ssl_stapling on;&#xA;    ssl_stapling_verify on;&#xA;    ssl_trusted_certificate cert/ca_bundle.crt;&#xA;    location / {&#xA;       proxy_pass http://127.0.0.1:8080;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;请将第4行中的&lt;code&gt;1.2.3.4&lt;/code&gt;修改为服务器 IP 地址；&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;cert/certificate.crt&lt;/code&gt;、&lt;code&gt;cert/private.key&lt;/code&gt;和&lt;code&gt;cert/ca_bundle.crt&lt;/code&gt;均为相对路径下存放的证书文件，绝对路径为：&lt;code&gt;/www/server/nginx/conf/cert&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;解决部分-android-app-连接-bark-后端服务时报错的问题&#34;&gt;✍🏻解决部分 Android App 连接 Bark 后端服务时报错的问题&lt;/h4&gt;&#xA;&lt;p&gt;开启 SSL 之后，在部分 Android 应用内访问服务器后端地址时可能会报错“java security cert.CertPathValidatorException: Trust anchor for certification path not found”，原因是后端服务在部署 SSL 时缺少了中间证书。&lt;/p&gt;&#xA;&lt;p&gt;你可以利用 &lt;a href=&#34;https://www.myssl.cn/tools/downloadchain.html&#34;&gt;https://www.myssl.cn/tools/downloadchain.html&lt;/a&gt; 这个工具，使用已有的&lt;code&gt;cert/certificate.crt&lt;/code&gt;文件快速生成中间证书，最后会得到&lt;code&gt;chain.crt&lt;/code&gt;这个文件。&lt;/p&gt;&#xA;&lt;p&gt;用文本编辑器打开&lt;code&gt;certificate.crt&lt;/code&gt;，在所有代码后面依次添加&lt;code&gt;ca_bundle.crt&lt;/code&gt;、&lt;code&gt;chain.crt&lt;/code&gt;这两个文件里的内容，最后的效果应该是这样的：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-----BEGIN CERTIFICATE-----&#xA;这里是 certificate.crt 原本的所有内容&#xA;-----END CERTIFICATE-----&#xA;-----BEGIN CERTIFICATE-----&#xA;这里是 ca_bundle.crt 文件中的所有内容&#xA;-----END CERTIFICATE-----&#xA;-----BEGIN CERTIFICATE-----&#xA;这里是 chain.crt 文件中的所有内容&#xA;-----END CERTIFICATE-----&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;保存文件，用这个编辑之后的&lt;code&gt;certificate.crt&lt;/code&gt;文件替换服务器中之前上传的的&lt;code&gt;certificate.crt&lt;/code&gt;，个别应用中报错的问题即可解决。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
